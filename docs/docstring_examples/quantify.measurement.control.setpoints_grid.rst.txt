.. include:: close_all_instruments.rst.txt

.. admonition:: Examples
    :class: dropdown, tip

        We first prepare some utilities necessarily for the examples.

        .. jupyter-execute::

            import numpy as np
            import xarray as xr
            from pathlib import Path
            from os.path import join
            import matplotlib.pyplot as plt
            from qcodes import ManualParameter, Parameter
            from quantify.measurement import MeasurementControl, grid_setpoints
            import quantify.data.handling as dh
            dh.set_datadir(join(Path.home(), 'quantify-data'))
            MC = MeasurementControl("MC")

            par0 = ManualParameter(name="x0", label="X0", unit="s")
            par1 = ManualParameter(name="x1", label="X1", unit="s")
            par2 = ManualParameter(name="x2", label="X2", unit="s")
            par3 = ManualParameter(name="x3", label="X3", unit="s")
            sig = Parameter(name='sig', label='Signal', unit='V', get_cmd=lambda: np.exp(par0()))

    .. admonition:: Iterative-only settables
        :class: dropdown, tip

            .. jupyter-execute::

                par0.batched = False
                par1.batched = False
                par2.batched = False

                sig.batched = False

                MC.settables([par0, par1, par2])
                MC.setpoints_grid([
                    np.linspace(0, 1, 4),
                    np.linspace(1, 2, 5),
                    np.linspace(2, 3, 6),
                ])
                MC.gettables(sig)
                dset = MC.run("demo")
                list(xr.plot.line(xi, label=name) for name, xi in dset.coords.items())
                plt.gca().legend()

    .. admonition:: Batched-only settables
        :class: dropdown, tip

            Note that the settable with lowest `.batch_size`  will be correspond to the
            innermost loop.

            .. jupyter-execute::

                par0.batched = True
                par1.batch_size = 8
                par1.batched = True
                par1.batch_size = 8
                par2.batched = True
                par2.batch_size = 4

                sig = Parameter(name='sig', label='Signal', unit='V', get_cmd=lambda: np.exp(par2()))
                sig.batched = True
                sig.batch_size = 32

                MC.settables([par0, par1, par2])
                MC.setpoints_grid([
                    np.linspace(0, 1, 3),
                    np.linspace(1, 2, 5),
                    np.linspace(2, 3, 4),
                ])
                MC.gettables(sig)
                dset = MC.run("demo")
                list(xr.plot.line(xi, label=name) for name, xi in dset.coords.items())
                plt.gca().legend()

    .. admonition:: Batched and iterative settables
        :class: dropdown, tip

            Note that the settable with lowest `.batch_size`  will be correspond to the
            innermost loop. Furthermore, the iterative settables will be the outermost loops.

            .. jupyter-execute::

                par0.batched = False
                par1.batched = True
                par1.batch_size = 8
                par2.batched = False
                par3.batched = True
                par3.batch_size = 4

                sig = Parameter(name='sig', label='Signal', unit='V', get_cmd=lambda: np.exp(par3()))
                sig.batched = True
                sig.batch_size = 32

                MC.settables([par0, par1, par2, par3])
                MC.setpoints_grid([
                    np.linspace(0, 1, 3),
                    np.linspace(1, 2, 5),
                    np.linspace(2, 3, 4),
                    np.linspace(3, 4, 6),
                ])
                MC.gettables(sig)
                dset = MC.run("demo")
                list(xr.plot.line(xi, label=name) for name, xi in dset.coords.items())
                plt.gca().legend()
