workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "external_pull_request_event"'

.shared-windows-runners:
  tags:
  - shared-windows
  - windows
  - windows-1809

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.7

variables:
  QT_DEBUG_PLUGINS: 0  # change to `1` when facing issues with Qt
  QT_QPA_PLATFORM: offscreen
  DOCKER_BUILDKIT: 1
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay

stages:
  - Build docker images
  - Static Analysis
  - Test
  - Docs build
  - Deploy

services:
  - docker:dind

# ######################################################################################
# Reusable code
# ######################################################################################

.save-test-artifacts:
  needs: []  # allow running in parallel with previous stage
  artifacts:
    paths:
      - htmlcov
      - coverage.xml
      - frozen-requirements.txt
    reports:
      cobertura: coverage.xml
    when: always

.run-for-develop-only:
  # make any job extend from this if it should run only on develop
  rules:
    # Only run when merging to develop branch
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
    - if: '$CI_COMMIT_BRANCH == "develop"'  # Also run for direct commits on develop

.docs-unix-and-artifacts:
  needs: []  # allow running in parallel with previous stage
  script:
    - cd docs
    - make html
  artifacts:
    paths:
      - frozen-requirements.txt

.docs-win-and-artifacts:
  needs: []  # allow running in parallel with previous stage
  script:
    - cd docs
    - .\make.bat html
  artifacts:
    paths:
      - frozen-requirements.txt

.pip-install-and-freeze:
  before_script:
  - pip install --upgrade --upgrade-strategy eager -e .
  - pip install --upgrade --upgrade-strategy eager -r requirements_dev.txt
  # save the version of the packages installed for CI debugging
  - pip freeze --all > frozen-requirements.txt; cat frozen-requirements.txt

.unix-run-pytest:
  script:
    - xvfb-run pytest -n 2 -s --cov=quantify --cov-report xml --cov-report html --cov-report term --cov-config=.coveragerc --color=yes
    # send the coverage.xml file to codacy
    - bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml


# # ######################################################################################
# # Test Unix
# # ######################################################################################

test-unix-3.7:
  stage: Test
  image: $CI_REGISTRY_IMAGE:python_3.7
  extends:
    - .pip-install-and-freeze
    - .unix-run-pytest
    - .save-test-artifacts
    - .run-for-develop-only

test-unix-3.8:
  stage: Test
  image: $CI_REGISTRY_IMAGE:python_3.8
  extends:
    - .pip-install-and-freeze
    - .unix-run-pytest
    - .save-test-artifacts

test-unix-latest:
  stage: Test
  image: $CI_REGISTRY_IMAGE:python_latest
  extends:
    - .pip-install-and-freeze
    - .unix-run-pytest
    - .save-test-artifacts
    - .run-for-develop-only
  allow_failure: true


# # ######################################################################################
# # Test Windows
# # ######################################################################################

# test-win-3.7.9:
#   stage: Test
#   extends:
#     - .shared-windows-runners
#     - .win-before-script-3.7.9
#     - .win-run-pytest
#     - .save-test-artifacts
#     - .run-for-develop-only

test-win-3.8:
  stage: Test
  variables:
    DOCKER_HOST: ""
    DOCKER_BUILDKIT: 0
    PYTEST_COMMAND: 'pytest -n 2 -s --cov=quantify --cov-report xml --cov-report html --cov-report term --cov-config=.coveragerc --color=yes'
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE:win_python_3.8
  script:
    - docker run $DOCKER_IMAGE $PYTEST_COMMAND
  extends:
    - .shared-windows-runners
    # - .pip-install-and-freeze
    # - .win-run-pytest
    - .save-test-artifacts
    # - .run-for-develop-only

# test-win-latest:
#   stage: Test
#   extends:
#     - .shared-windows-runners
#     - .win-before-script-latest
#     - .win-run-pytest
#     - .save-test-artifacts
#     - .run-for-develop-only
#   # latest version always allowed to fail due to unforeseen changes
#   allow_failure: true

# # ######################################################################################
# # Docs build Unix
# # ######################################################################################

docs-unix-make-html-3.7:
  stage: Docs build
  image: $CI_REGISTRY_IMAGE:python_3.7
  extends:
    - .pip-install-and-freeze
    - .docs-unix-and-artifacts
    - .run-for-develop-only

docs-unix-make-html-3.8:
  stage: Docs build
  image: $CI_REGISTRY_IMAGE:python_3.8
  extends:
    - .pip-install-and-freeze
    - .docs-unix-and-artifacts
    - .run-for-develop-only

docs-unix-make-html-latest:
  stage: Docs build
  image: $CI_REGISTRY_IMAGE:python_latest
  extends:
    - .pip-install-and-freeze
    - .docs-unix-and-artifacts
    - .run-for-develop-only
  # latest version always allowed to fail due to unforeseen changes
  allow_failure: true

# # ######################################################################################
# # Docs build Windows
# # ######################################################################################

# docs-win-make-html-3.7.9:
#   stage: Docs build
#   extends:
#     - .shared-windows-runners
#     - .pip-install-and-freeze
#     - .docs-win-and-artifacts
#     - .run-for-develop-only
#   # Allowed to fail since the build was successful with font warnings.
#   # See quantify-core#196
#   allow_failure: true

docs-win-make-html-3.8.9:
  stage: Docs build
  image: $CI_REGISTRY_IMAGE:win_python_3.8
  extends:
    - .shared-windows-runners
    - .pip-install-and-freeze
    - .docs-win-and-artifacts
    # - .run-for-develop-only
  # Allowed to fail due to asyncio problems (quantify-core#182)
  allow_failure: true

# docs-win-make-html-latest:
#   stage: Docs build
#   extends:
#     - .shared-windows-runners
#     - .pip-install-and-freeze
#     - .docs-win-and-artifacts
#     - .run-for-develop-only
#   # Allowed to fail due to asyncio problems (quantify-core#182)
#   allow_failure: true

# # ######################################################################################
# # Static Analysis
# # ######################################################################################

# black:
#   stage: Static Analysis
#   image: $CI_REGISTRY_IMAGE:python_3.8
#   extends:
#     - .unix-before-script
#   script:
#     - black --check --fast .

# ######################################################################################
# Build Docker images
# ######################################################################################

build_unix_3.7_image:
  stage: Build docker images
  image: docker:stable
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:python_3.7
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG -f $CI_PROJECT_DIR/Dockerfiles/unix/Dockerfile_python37 .
    - docker push $IMAGE_TAG
  when: manual
  allow_failure: true

build_unix_3.8_image:
  stage: Build docker images
  image: docker:stable
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:python_3.8
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG -f $CI_PROJECT_DIR/Dockerfiles/unix/Dockerfile_python38 .
    - docker push $IMAGE_TAG
  when: manual
  allow_failure: true

build_unix_3.9_image:
  stage: Build docker images
  image: docker:stable
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:python_3.9
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG -f $CI_PROJECT_DIR/Dockerfiles/unix/Dockerfile_python39 .
    - docker push $IMAGE_TAG
  when: manual
  allow_failure: true

build_unix_latest_image:
  stage: Build docker images
  image: docker:stable
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:python_latest
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG -f $CI_PROJECT_DIR/Dockerfiles/unix/Dockerfile_python_latest .
    - docker push $IMAGE_TAG
  when: manual
  allow_failure: true

build_win_3.7_image:
  stage: Build docker images
  extends:
    - .shared-windows-runners
  image: docker:windowsservercore
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:win_python_3.7
    DOCKER_HOST: ""
    DOCKER_BUILDKIT: 0
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG -f $CI_PROJECT_DIR\Dockerfiles\windows\Dockerfile_python37 .
    - docker push $IMAGE_TAG
  when: manual
  allow_failure: true

build_win_3.8_image:
  stage: Build docker images
  extends:
    - .shared-windows-runners
  image: docker:windowsservercore
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:win_python_3.8
    DOCKER_HOST: ""
    DOCKER_BUILDKIT: 0
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG -f $CI_PROJECT_DIR\Dockerfiles\windows\Dockerfile_python38 .
    - docker push $IMAGE_TAG
  when: manual
  allow_failure: true

build_win_3.9_image:
  stage: Build docker images
  extends:
    - .shared-windows-runners
  image: docker:windowsservercore
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:win_python_3.9
    DOCKER_HOST: ""
    DOCKER_BUILDKIT: 0
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG -f $CI_PROJECT_DIR\Dockerfiles\windows\Dockerfile_python39 .
    - docker push $IMAGE_TAG
  when: manual
  allow_failure: true

build_win_latest_image:
  stage: Build docker images
  extends:
    - .shared-windows-runners
  image: docker:windowsservercore
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:win_python_latest
    DOCKER_HOST: ""
    DOCKER_BUILDKIT: 0
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG -f $CI_PROJECT_DIR\Dockerfiles\windows\Dockerfile_python_latest .
    - docker push $IMAGE_TAG
  when: manual
  allow_failure: true
